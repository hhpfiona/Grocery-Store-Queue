from __future__ import annotations

from io import StringIO
from typing import TextIO
from store import GroceryStore, Customer, Item, NoAvailableLineError


class Event:
    """An event in our grocery store simulation.

    Events have an ordering based on the event timestamp. For any two events
    e1 and e2, e1 < e2 iff event e1 has a timestamp that is less than event e2.
    This signifies that e1 happens before e2.

    This is an abstract class and should not be instantiated.

    Attributes:
    - timestamp: The time when this event occurs.

    Representation Invariants:
    - timestamp >= 0
    """
    timestamp: int

    def __init__(self, timestamp: int) -> None:
        """Initialize an Event with a given timestamp.

        Preconditions:
            - timestamp >= 0

        >>> Event(7).timestamp
        7
        """
        self.timestamp = timestamp

    # The following three methods allow for comparison of Event instances
    # using the standard comparison operators, such as ==, <, and <=.
    # All methods simply perform the desired comparison on the 'timestamp'
    # attribute of the two events.
    def __eq__(self, other: Event) -> bool:
        """Return whether this Event is equal to <other>.

        Two events are equal iff they have the same timestamp.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first == second
        False
        >>> second.timestamp = first.timestamp
        >>> first == second
        True
        """
        return self.timestamp == other.timestamp

    def __lt__(self, other: Event) -> bool:
        """Return True iff this Event is less than <other>.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first < second
        True
        >>> second < first
        False
        """
        return self.timestamp < other.timestamp

    def __le__(self, other: Event) -> bool:
        """Return True iff this Event is less than or equal to <other>.

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first <= first
        True
        >>> first <= second
        True
        >>> second <= first
        False
        """
        return self.timestamp <= other.timestamp

    def do(self, store: GroceryStore) -> list[Event]:
        """Perform this event as specified in the A1 handout, and return any
        events generated by doing so.
        """
        raise NotImplementedError

    def __str__(self) -> str:
        """
        Return a string representation of this event in the form
        "Event [X] has occurred at time [timestamp]
        (OPTIONAL) at line [num] with customer [c]."
        """
        raise NotImplementedError


class CustomerArrival(Event):
    """A customer arrives at the checkout area ready to join a line and
    check out.

    Attributes:
    - customer: The arriving customer
    """
    timestamp: int
    customer: Customer

    def __init__(self, timestamp: int, c: Customer) -> None:
        """Initialize a CustomerArrival event with the given <timestamp>
        and customer <c>.

        If the customer's arrival time is None, set it now to record
        the fact that this is the time when they first arrived at the
        checkout area. (This is the start of their waiting time.)

        Preconditions:
        - timestamp >= 0
        """
        Event.__init__(self, timestamp)
        self.customer = c
        if c.arrival_time is None:
            c.arrival_time = timestamp

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer joins an empty checkout line, a new checkout Started
        event is added with the same timestamp as the Customer Arrival event.
        If there is no line for the customer to join, a new Customer Arrival
        event is generated for them, with a timestamp that is one step in the
        future.
        """
        try:
            line_number = store.enter_line(self.customer)
            line = store.lines[line_number]
            if line.first_in_line() is self.customer:
                return [CheckoutStarted(self.timestamp, line_number)]
            else:
                return []
        except NoAvailableLineError:
            return [CustomerArrival(self.timestamp + 1, self.customer)]

    def __str__(self) -> str:
        """
        Return a string representation of this event in the form
        "Event [X] has occurred at time [timestamp]
        (OPTIONAL) at line [num] with customer [c]."
        """
        return 'Event ' + self.__class__.__name__ + ' has occurred at time ' + \
            str(self.timestamp) + ' with customer ' + str(self.customer) + '.'


class CheckoutStarted(Event):
    """A customer starts the checkout process in a particular checkout line.

    Attributes:
    - line_number: The number of the checkout line.
    """
    timestamp: int
    line_number: int

    def __init__(self, timestamp: int, line_number: int) -> None:
        """Initialize a CheckoutStarted event with the given <timestamp>
        and <line_number>.

        Preconditions:
        - timestamp >= 0
        - line_number >= 0
        """
        Event.__init__(self, timestamp)
        self.line_number = line_number

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer begins checking out, a new Checkout Completed event is
        added with the same timestamp as the Checkout Started timestamp, plus
        the appropriate amount of time based on the type of checkout line and
        the time required for the customer’s items.
        """
        line = store.lines[self.line_number]
        return [CheckoutCompleted(self.timestamp + line.next_checkout_time(),
                                  self.line_number, line.first_in_line())]

    def __str__(self) -> str:
        """
        Return a string representation of this event in the form
        "Event [X] has occurred at time [timestamp]
        (OPTIONAL) at line [num] with customer [c]."
        """
        return 'Event ' + self.__class__.__name__ + ' has occurred at time ' + \
            str(self.timestamp) + ' at line ' + str(self.line_number) + '.'


class CheckoutCompleted(Event):
    """A customer finishes the checkout process.

    Attributes:
    - line_number: The number of the checkout line where a customer
      is finishing.
    - customer: The finishing customer.
    """
    timestamp: int
    line_number: int
    customer: Customer

    def __init__(self, timestamp: int, line_number: int, c: Customer) -> None:
        """Initialize a CheckoutCompleted event.
        """
        Event.__init__(self, timestamp)
        self.line_number = line_number
        self.customer = c

    def do(self, store: GroceryStore) -> list[Event]:
        """If a customer finishes checking out, the next customer in the line
        (if there is one) gets a Checkout Started event with the same timestamp
        as the Checkout Completed event.
        """
        line = store.lines[self.line_number]
        if line.remove_front_customer() > 0:
            return [CheckoutStarted(self.timestamp, self.line_number)]
        else:
            return []

    def __str__(self) -> str:
        """
        Return a string representation of this event in the form
        "Event [X] has occurred at time [timestamp]
        (OPTIONAL) at line [num] with customer [c]."
        """
        return 'Event ' + self.__class__.__name__ + ' has occurred at time ' + \
            str(self.timestamp) + ' at line ' + str(self.line_number) \
            + ' with customer ' + str(self.customer) + '.'


class CloseLine(Event):
    """A CheckoutLine gets closed.

    Attributes:
    - line_number: The number of the checkout line.
    """
    timestamp: int
    line_number: int

    def __init__(self, timestamp: int, line_number: int) -> None:
        """Initialize a CloseLine event.
        """
        Event.__init__(self, timestamp)
        self.line_number = line_number

    def do(self, store: GroceryStore) -> list[Event]:
        """If a line closes, all but the first customer in line needs to go into
        a new line, starting with the customer at the end – essentially they
        re-arrive at the checkout area. So there is one Customer Arrival event
        per customer in the line that is closing (except the first customer).
        The last customer in the line should have a Customer Arrival event whose
        time is the same as the time of the “close line” event, and the other
        Customer Arrival events should follow it in time, spaced 1 second apart.
        """
        events = []
        line = store.lines[self.line_number]
        customers = line.close()
        i = 0
        for c in reversed(customers):
            event = CustomerArrival(self.timestamp + i, c)
            events.append(event)
            i += 1
        return events

    def __str__(self) -> str:
        """
        Return a string representation of this event in the form
        "Event [X] has occurred at time [timestamp]
        (OPTIONAL) at line [num] with customer [c]."
        """
        return 'Event ' + self.__class__.__name__ + ' has occurred at time ' + \
            str(self.timestamp) + ' at line ' + str(self.line_number) + '.'


EVENT_SAMPLE = StringIO("""121 Arrive William Bananas 7
22 Arrive Trevor Flowers 22 Bread 3 Cheese 3 Cheese 3
41 Close 0""")


def create_event_list(event_file: TextIO) -> list[Event]:
    """Return a list of Event objects to represent the events in <filename>.

    The events in the list must be in the same order as they are in the file.

    Preconditions:
    - <event_file> is open.
    - <event_file> is in the format specified by the assignment handout, i.e.,
    1) there will be at least one event in the event file;
    2) no customer will have two arrival events in the same event file; and
    3) the events can be simulated successfully (e.g., there will be at least
    one checkout open so that all customers can eventually check out).

    >>> samp_events = create_event_list(EVENT_SAMPLE)
    >>> len(samp_events) == 3
    True
    >>> isinstance(samp_events[0], CustomerArrival)
    True
    >>> isinstance(samp_events[2], CloseLine)
    True
    """
    lines = event_file.readlines()
    events = []
    for line in lines:
        info = line.split()
        timestamp = int(info[0])
        event = info[1]
        name = info[2]
        if event == 'Arrive':
            objects = info[3:]
            items = []
            for i in range(0, len(objects), 2):
                item = Item(objects[i], int(objects[i + 1]))
                items.append(item)
            customer = Customer(name, items)
            events.append(CustomerArrival(timestamp, customer))
        elif event == 'Close':
            events.append(CloseLine(timestamp, int(name)))
    return events


if __name__ == '__main__':
    import doctest

    doctest.testmod()
